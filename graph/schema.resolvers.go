package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"todo-app/ent"
	"todo-app/ent/todo"

	"github.com/google/uuid"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, task string) (*ent.Todo, error) {
	t, err := r.Client.Todo.Create().
		SetID(uuid.New()).
		SetTask(task).
		SetCompleted(false).
		Save(ctx)

	return t, err
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id uuid.UUID, task *string, completed *bool) (*ent.Todo, error) {
	updater := r.Client.Todo.UpdateOneID(id)
	if task != nil {
		updater.SetTask(*task)
	}
	if completed != nil {
		updater.SetCompleted(*completed)
	}

	t, err := updater.Save(ctx)
	return t, err
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id uuid.UUID) (bool, error) {
	err := r.Client.Todo.DeleteOneID(id).Exec(ctx)
	return err == nil, err
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, completed *bool) ([]*ent.Todo, error) {
	if completed == nil {
		return r.Client.Todo.Query().All(ctx)
	}
	return r.Client.Todo.Query().Where(todo.Completed(*completed)).All(ctx)
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id uuid.UUID) (*ent.Todo, error) {
	t, err := r.Client.Todo.Get(ctx, id)
	return t, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
